!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("haskell",function(e,t){function i(e,t,i){return t(i),i(e,t)}function d(e,t){if(e.eatWhile(f))return null;var d=e.next();if(c.test(d)){if("{"==d&&e.eat("-")){var m="comment";return e.eat("#")&&(m="meta"),i(e,t,h(m,1))}return null}if("'"==d)return e.eat("\\")?e.next():e.next(),e.eat("'")?"string":"error";if('"'==d)return i(e,t,p);if(n.test(d))return e.eatWhile(l),e.eat(".")?"qualifier":"variable-2";if(r.test(d))return e.eatWhile(l),"variable";if(a.test(d)){if("0"==d){if(e.eat(/[xX]/))return e.eatWhile(o),"integer";if(e.eat(/[oO]/))return e.eatWhile(s),"number"}e.eatWhile(a);var m="number";return e.match(/^\.\d+/)&&(m="number"),e.eat(/[eE]/)&&(m="number",e.eat(/[-+]/),e.eatWhile(a)),m}if("."==d&&e.eat("."))return"keyword";if(u.test(d)){if("-"==d&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(u)))return e.skipToEnd(),"comment";var m="variable";return":"==d&&(m="variable-2"),e.eatWhile(u),m}return"error"}function h(e,t){return 0==t?d:function(i,r){for(var n=t;!i.eol();){var a=i.next();if("{"==a&&i.eat("-"))++n;else if("-"==a&&i.eat("}")&&(--n,0==n))return r(d),e}return r(h(e,n)),e}}function p(e,t){for(;!e.eol();){var i=e.next();if('"'==i)return t(d),"string";if("\\"==i){if(e.eol()||e.eat(f))return t(m),"string";e.eat("&")||e.next()}}return t(d),"error"}function m(e,t){return e.eat("\\")?i(e,t,p):(e.next(),t(d),"error")}var r=/[a-z_]/,n=/[A-Z]/,a=/\d/,o=/[0-9A-Fa-f]/,s=/[0-7]/,l=/[a-z_A-Z0-9'\xa1-\uffff]/,u=/[-!#$%&*+.\/<=>?@\\^|~:]/,c=/[(),;[\]`{}]/,f=/[ \t\v\f]/,y=function(){function i(t){return function(){for(var i=0;i<arguments.length;i++)e[arguments[i]]=t}}var e={};i("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),i("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>"),i("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**"),i("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),i("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var r=t.overrideKeywords;if(r)for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);return e}();return{startState:function(){return{f:d}},copyState:function(e){return{f:e.f}},token:function(e,t){var i=t.f(e,function(e){t.f=e}),r=e.current();return y.hasOwnProperty(r)?y[r]:i},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),e.defineMIME("text/x-haskell","haskell")});
