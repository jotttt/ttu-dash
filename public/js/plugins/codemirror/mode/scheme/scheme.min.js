!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("scheme",function(){function s(e){for(var t={},r=e.split(" "),i=0;i<r.length;++i)t[r[i]]=!0;return t}function c(e,t,r){this.indent=e,this.type=t,this.prev=r}function f(e,t,r){e.indentStack=new c(t,r,e.indentStack)}function d(e){e.indentStack=e.indentStack.prev}function g(e){return e.match(p)}function v(e){return e.match(h)}function b(e,t){return t===!0&&e.backUp(1),e.match(y)}function x(e){return e.match(m)}var e="builtin",t="comment",r="string",i="atom",n="number",a="bracket",o=2,l=s("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),u=s("define let letrec let* lambda"),p=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),h=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),m=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),y=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1}},token:function(s,c){if(null==c.indentStack&&s.sol()&&(c.indentation=s.indentation()),s.eatSpace())return null;var p=null;switch(c.mode){case"string":for(var h,m=!1;null!=(h=s.next());){if('"'==h&&!m){c.mode=!1;break}m=!m&&"\\"==h}p=r;break;case"comment":for(var h,y=!1;null!=(h=s.next());){if("#"==h&&y){c.mode=!1;break}y="|"==h}p=t;break;case"s-expr-comment":if(c.mode=!1,"("!=s.peek()&&"["!=s.peek()){s.eatWhile(/[^/s]/),p=t;break}c.sExprComment=0;default:var w=s.next();if('"'==w)c.mode="string",p=r;else if("'"==w)p=i;else if("#"==w)if(s.eat("|"))c.mode="comment",p=t;else if(s.eat(/[tf]/i))p=i;else if(s.eat(";"))c.mode="s-expr-comment",p=t;else{var k=null,_=!1,j=!0;s.eat(/[ei]/i)?_=!0:s.backUp(1),s.match(/^#b/i)?k=g:s.match(/^#o/i)?k=v:s.match(/^#x/i)?k=x:s.match(/^#d/i)?k=b:s.match(/^[-+0-9.]/,!1)?(j=!1,k=b):_||s.eat("#"),null!=k&&(j&&!_&&s.match(/^#[ei]/i),k(s)&&(p=n))}else if(/^[-+0-9.]/.test(w)&&b(s,!0))p=n;else if(";"==w)s.skipToEnd(),p=t;else if("("==w||"["==w){for(var Q,T="",S=s.column();null!=(Q=s.eat(/[^\s\(\[\;\)\]]/));)T+=Q;T.length>0&&u.propertyIsEnumerable(T)?f(c,S+o,w):(s.eatSpace(),s.eol()||";"==s.peek()?f(c,S+1,w):f(c,S+s.current().length,w)),s.backUp(s.current().length-1),"number"==typeof c.sExprComment&&c.sExprComment++,p=a}else")"==w||"]"==w?(p=a,null!=c.indentStack&&c.indentStack.type==(")"==w?"(":"[")&&(d(c),"number"==typeof c.sExprComment&&0==--c.sExprComment&&(p=t,c.sExprComment=!1))):(s.eatWhile(/[\w\$_\-!$%&*+\.\/:<=>?@\^~]/),p=l&&l.propertyIsEnumerable(s.current())?e:"variable")}return"number"==typeof c.sExprComment?t:p},indent:function(e){return null==e.indentStack?e.indentation:e.indentStack.indent},lineComment:";;"}}),e.defineMIME("text/x-scheme","scheme")});
